From 78ace9c6518b4ffdb3f420f938ac1fdb55ca31ef Mon Sep 17 00:00:00 2001
From: Luke Faraone <lfaraone@humbughq.com>
Date: Mon, 24 Jun 2013 13:52:12 -0400
Subject: [PATCH] Support usage without anonymous users

With some custom models, creating users may be complicated; reasonable
defaults may not exist for some fields, and special-casing a sentinel user
elsewhere in views code separately from Django's provided AnonymousUser may
be unpalatable.

For these situations this commit adds the ability to disable anonymous user
support entirely; any permissions check against such a user will always
return False. No user is created when "syncdb" is run.

To disable anonymous user support in your site, set ANONYMOUS_USER_ID to
"None" in settings.py.

An unset ANONYMOUS_USER_ID will still cause an error.
---
 guardian/backends.py            |    3 +++
 guardian/conf/settings.py       |    6 ++++--
 guardian/management/__init__.py |    6 ++++--
 3 files changed, 11 insertions(+), 4 deletions(-)

diff --git a/guardian/backends.py b/guardian/backends.py
index 92f0427..bbe1b66 100644
--- a/guardian/backends.py
+++ b/guardian/backends.py
@@ -45,6 +45,9 @@ class ObjectPermissionBackend(object):
         # This is how we support anonymous users - simply try to retrieve User
         # instance and perform checks for that predefined user
         if not user_obj.is_authenticated():
+            # If anonymous user permission is disabled then they are always unauthorized
+            if settings.ANONYMOUS_USER_ID is None:
+                return False
             user_obj = get_user_model().objects.get(pk=settings.ANONYMOUS_USER_ID)
 
         # Do not check any further if user is not active
diff --git a/guardian/conf/settings.py b/guardian/conf/settings.py
index 4ff90fb..7eda993 100644
--- a/guardian/conf/settings.py
+++ b/guardian/conf/settings.py
@@ -4,8 +4,10 @@ from django.core.exceptions import ImproperlyConfigured
 
 ANONYMOUS_DEFAULT_USERNAME_VALUE = getattr(settings,
     'ANONYMOUS_DEFAULT_USERNAME_VALUE', 'AnonymousUser')
-ANONYMOUS_USER_ID = getattr(settings, 'ANONYMOUS_USER_ID', None)
-if ANONYMOUS_USER_ID is None:
+
+try:
+    ANONYMOUS_USER_ID = settings.ANONYMOUS_USER_ID
+except AttributeError:
     raise ImproperlyConfigured("In order to use django-guardian's "
         "ObjectPermissionBackend authorization backend you have to configure "
         "ANONYMOUS_USER_ID at your settings module")
diff --git a/guardian/management/__init__.py b/guardian/management/__init__.py
index df71665..465e802 100644
--- a/guardian/management/__init__.py
+++ b/guardian/management/__init__.py
@@ -22,6 +22,8 @@ def create_anonymous_user(sender, **kwargs):
             User.objects.create(pk=guardian_settings.ANONYMOUS_USER_ID,
                 username=guardian_settings.ANONYMOUS_DEFAULT_USERNAME_VALUE)
 
-signals.post_syncdb.connect(create_anonymous_user, sender=guardian_app,
-    dispatch_uid="guardian.management.create_anonymous_user")
+# Only create an anonymous user if support is enabled.
+if guardian_settings.ANONYMOUS_USER_ID is not None:
+    signals.post_syncdb.connect(create_anonymous_user, sender=guardian_app,
+        dispatch_uid="guardian.management.create_anonymous_user")
 
-- 
1.7.9.5

